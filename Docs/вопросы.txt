что из этого допы
что такое процедурный.
Процедурный язык программирования - это тип языка программирования, организованный вокруг понятия процедур (или подпрограмм), 
которые представляют собой набор инструкций, выполняющих конкретную задачу. Процедурные языки подразумевают структурированное 
программирование и четко определенный порядок выполнения операций.

какой размер таблиц идентификаторов и лексем
лексем - 4096
идентификаторов - 4096

rvalue
В программировании термин "rvalue" относится к выражению (значению), которое может быть использовано только 
в правой стороне (right side) оператора присваивания. Он представляет собой временное значение, которое может 
быть перемещено (move) или скопировано (copy), но не может быть назначено. В контексте C++ и некоторых других 
языков программирования, рvalue является выражением, которое не имеет имени и не обладает идентификатором в коде программы.

обратная польская запись
формирование 
если числа то в результат строку
открывающая скобка в стек
выражение в стек
если выражение меньшего и равного приотритета, то оно выталкивает выражение из стека
если большего приоритета просто кладется в стек
если закрывающая скобка, то она выталкивает все выражения до открывающей скобки и эти скобки уничтожаются

stdcall
Особенности stdcall:

Порядок параметров:
В соглашении stdcall параметры передаются функции справа налево, то есть первым передается последний параметр функции.

Очистка стека:
Особенностью stdcall является то, что вызывающая функция отвечает за очистку стека от 
параметров после завершения вызываемой функции. Это означает, что вызываемая функция не должна удалять параметры из стека.

Регистры и стек:
Обычно первые несколько параметров передаются через регистры (если это возможно), а остальные 
помещаются в стек. Возвращаемое значение функции также обычно помещается в регистр.

Нотация Бэкуса Наура
Нотация Бэкуса-Наура (BNF) представляет собой формальный метасинтаксис для описания синтаксических правил языков 
программирования, данных и других форматов. Эта нотация была введена Джоном Бэкусом и Питером Науром в 1950-х годах 
и стала широко используемой в теории формальных языков и компьютерных науках.

Основные элементы BNF включают:

Нетерминалы (Nonterminals):
Представляют собой абстракции или категории, которые будут заменены на конкретные последовательности символов. 
Нетерминалы представлены в правилах грамматики и могут быть использованы для определения других нетерминалов.

Терминалы (Terminals):
Представляют собой конечные символы, которые составляют язык. Это могут быть буквы, цифры, знаки препинания и 
другие символы. Терминалы не подлежат замене.

Правила продукции (Production Rules):
Определяют, как нетерминалы могут быть заменены на последовательности терминалов и/или других нетерминалов. 
Правила имеют вид A ::= α, где A - нетерминал, а α - последовательность терминальных и/или нетерминальных символов.

нормальная форма грейбах
Нормальная форма Грейбах (Greibach Normal Form, GNF) — это одна из нормальных форм в теории формальных языков. 
Она была введена Ф. Грейбахом (F. Greibach) в 1965 году. Нормальная форма Грейбаха является подмножеством нормальной формы Хомского.

Грамматика находится в нормальной форме Грейбах, если все правила продукции имеют следующий вид:

S -> aA
A -> aBC
B -> bD
D -> bD
C -> e
Эта грамматика находится в нормальной форме Грейбаха, 
так как все правила продукции соответствуют указанному виду.
Нормальная форма Грейбаха (Грейбаха) - это специальный вид записи для правил грамматики, 
которые описывают, как формируются строки в языке. В нормальной форме Грейбаха каждое правило 
грамматики имеет форму "некоторый символ может быть заменен на символ, за которым следует 
некоторая последовательность других символов".

потестить 
числова больше одного байта (done)
макс длина идентификатора 8 символов, только нижний регистр. (done)
идентификаторы не должны совпадать с ключевыми словами. (done)
нельзя использовать цифры в идентификаторач (done)
отрицательные числа (done)
пустой список параметров (done)
побаловаться со строками и их окончаниями в памяти на ассемблере (done)

Присваивание	<идентификатор> = <выражение>;
Выражением может быть идентификатор, литерал, или вызов функции соответствующего типа. 
Для целочисленного типа выражение может быть дополнено арифметическими операциями с любым          (done)
количеством операндов с использованием скобок. Для строкового типа выражение может быть только 
идентификатором, литералом или вызовом функции, возвращающей значение строкового типа.


использование необъявленной/неинициализированной переменной (done)

Ограничения на строковые литералы языка KVV-2023: внутри литерала не допускается использование одинарных и двойных кавычек. 
Ограничения на целочисленные литералы:  если литерал отрицательный, после знака “-” не может быть нуль.                     (done)

Допускается использовать в выражении вызов функции, вычисляющей и возвращающей целочисленное значение.   (done)
Все объявления и операции с переменными происходят внутри какого-либо блока.    (done)
пустой маин или тело функции


